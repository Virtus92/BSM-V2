version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: bsm-n8n-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${N8N_DB_USER:-n8n}
      POSTGRES_PASSWORD: ${N8N_DB_PASSWORD:-n8npass}
      POSTGRES_DB: ${N8N_DB_NAME:-n8n}
    volumes:
      - n8n-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${N8N_DB_USER:-n8n}"]
      interval: 5s
      timeout: 5s
      retries: 20

  n8n:
    image: n8nio/n8n:latest
    container_name: bsm-n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${N8N_DB_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${N8N_DB_PASSWORD:-n8npass}
      N8N_HOST: n8n
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      N8N_DIAGNOSTICS_ENABLED: 'false'
      N8N_PERSONALIZATION_ENABLED: 'false'
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      # Secure API with key; Next.js uses N8N_API_KEY to access /rest
      N8N_API_KEY: ${N8N_API_KEY}
      # Enable credentials overwrite from mounted file
      N8N_SECURE_CREDENTIALS_OVERWRITE: 'true'
      CREDENTIALS_OVERWRITE_PATH: /home/node/.n8n/credentials_overwrite.json
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n/credentials_overwrite.json:/home/node/.n8n/credentials_overwrite.json:ro
    ports:
      - "5679:5678"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/health"]
      interval: 10s
      timeout: 5s
      retries: 20

  # Migration and setup service
  setup:
    image: node:20-alpine
    container_name: bsm-setup
    working_dir: /app
    depends_on:
      n8n:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      N8N_BASE_URL: http://n8n:5678
      N8N_API_KEY: ${N8N_API_KEY}
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "apk add --no-cache curl && npm ci --legacy-peer-deps && chmod +x ./scripts/docker-init.sh && ./scripts/docker-init.sh"
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY}
        SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
        N8N_API_KEY: ${N8N_API_KEY}
    container_name: bsm-app
    restart: unless-stopped
    depends_on:
      n8n:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      N8N_BASE_URL: http://n8n:5678
      N8N_API_KEY: ${N8N_API_KEY}
    ports:
      - "4000:3000"
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3000/api/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  n8n-db:
  n8n-data:

